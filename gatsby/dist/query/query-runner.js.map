{"version":3,"file":"query-runner.js","names":["resultHashCache","getResultHashCache","GatsbyCacheLmdb","name","encoding","init","reportLongRunningQueryJob","queryJob","messageParts","componentPath","queryType","push","context","path","report","warn","join","panicQueryJobError","errors","urlPath","undefined","queryContext","plugin","pluginCreatorId","structuredErrors","map","e","structuredError","errorParser","message","filePath","location","error","codeFrame","getCodeFrame","query","locations","line","column","panicOnBuild","startQueryJob","graphqlRunner","parentSpan","isPending","timeoutId","setTimeout","queryName","id","finally","clearTimeout","queryRunner","program","store","getState","dispatch","actions","queryStart","isPage","result","Object","assign","pageContext","internalComponentName","component","componentChunkName","updatedAt","pluginCreator___NODE","isCreatedByStatefulCreatePages","matchPath","mode","slices","resultJSON","JSON","stringify","resultHash","crypto","createHash","update","digest","resultHashCacheKey","hash","get","pageDataExists","directory","set","savePageQueryResult","type","payload","substring","resultPath","fs","outputFile","pageQueryRun","queryHash"],"sources":["../../src/query/query-runner.ts"],"sourcesContent":["import { Span } from \"opentracing\"\nimport _ from \"lodash\"\nimport fs from \"fs-extra\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport crypto from \"crypto\"\nimport { ExecutionResult, GraphQLError } from \"graphql\"\n\nimport path from \"path\"\nimport { store } from \"../redux\"\nimport { actions } from \"../redux/actions\"\nimport { getCodeFrame } from \"./graphql-errors-codeframe\"\nimport errorParser from \"./error-parser\"\n\nimport { GraphQLRunner } from \"./graphql-runner\"\nimport { IExecutionResult, PageContext } from \"./types\"\nimport { pageDataExists, savePageQueryResult } from \"../utils/page-data\"\nimport GatsbyCacheLmdb from \"../utils/cache-lmdb\"\n\nlet resultHashCache: GatsbyCacheLmdb | undefined\nfunction getResultHashCache(): GatsbyCacheLmdb {\n  if (!resultHashCache) {\n    resultHashCache = new GatsbyCacheLmdb({\n      name: `query-result-hashes`,\n      encoding: `string`,\n    }).init()\n  }\n  return resultHashCache\n}\n\nexport interface IQueryJob {\n  id: string\n  hash?: string\n  query: string\n  componentPath: string\n  context: PageContext\n  queryType: \"page\" | \"static\" | \"slice\"\n  pluginCreatorId?: string\n}\n\nfunction reportLongRunningQueryJob(queryJob: IQueryJob): void {\n  const messageParts = [\n    `This query took more than 15s to run â€” which might indicate you're querying too much or have some unoptimized code:`,\n    `File path: ${queryJob.componentPath}`,\n  ]\n\n  if (queryJob.queryType === `page`) {\n    messageParts.push(`URL path: ${queryJob.context.path}`)\n  }\n\n  report.warn(messageParts.join(`\\n`))\n}\n\nfunction panicQueryJobError(\n  queryJob: IQueryJob,\n  errors: ReadonlyArray<GraphQLError>\n): void {\n  let urlPath = undefined\n  let queryContext = {}\n  const plugin = queryJob.pluginCreatorId || `none`\n\n  if (queryJob.queryType === `page`) {\n    urlPath = queryJob.context.path\n    queryContext = queryJob.context.context\n  }\n\n  const structuredErrors = errors.map(e => {\n    const structuredError = errorParser({\n      message: e.message,\n      filePath: undefined,\n      location: undefined,\n      error: e,\n    })\n\n    structuredError.context = {\n      ...structuredError.context,\n      codeFrame: getCodeFrame(\n        queryJob.query,\n        e.locations && e.locations[0].line,\n        e.locations && e.locations[0].column\n      ),\n      filePath: queryJob.componentPath,\n      ...(urlPath ? { urlPath } : {}),\n      ...queryContext,\n      plugin,\n    }\n\n    return structuredError\n  })\n\n  report.panicOnBuild(structuredErrors)\n}\n\nasync function startQueryJob(\n  graphqlRunner: GraphQLRunner,\n  queryJob: IQueryJob,\n  parentSpan: Span | undefined\n): Promise<ExecutionResult> {\n  let isPending = true\n\n  // Print out warning when query takes too long\n  const timeoutId = setTimeout(() => {\n    if (isPending) {\n      reportLongRunningQueryJob(queryJob)\n    }\n  }, 15000)\n\n  return graphqlRunner\n    .query(queryJob.query, queryJob.context, {\n      parentSpan,\n      queryName: queryJob.id,\n      componentPath: queryJob.componentPath,\n    })\n    .finally(() => {\n      isPending = false\n      clearTimeout(timeoutId)\n    })\n}\n\nexport async function queryRunner(\n  graphqlRunner: GraphQLRunner,\n  queryJob: IQueryJob,\n  parentSpan: Span | undefined\n): Promise<IExecutionResult> {\n  const { program } = store.getState()\n\n  store.dispatch(\n    actions.queryStart({\n      path: queryJob.id,\n      componentPath: queryJob.componentPath,\n      isPage: queryJob.queryType === `page`,\n    })\n  )\n\n  // Run query\n  let result: IExecutionResult\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await startQueryJob(graphqlRunner, queryJob, parentSpan)\n  }\n\n  if (result.errors) {\n    // If there's a graphql error then log the error and exit\n    panicQueryJobError(queryJob, result.errors)\n  }\n\n  // Add the page/slice context onto the results.\n  if (queryJob) {\n    if (queryJob.queryType === `page`) {\n      result[`pageContext`] = Object.assign({}, queryJob.context)\n    } else if (queryJob.queryType === `slice`) {\n      result[`sliceContext`] = Object.assign({}, queryJob.context)\n    }\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n    delete result.pageContext.isCreatedByStatefulCreatePages\n    delete result.pageContext.matchPath\n    delete result.pageContext.mode\n    delete result.pageContext.slices\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = crypto\n    .createHash(`sha1`)\n    .update(resultJSON)\n    .digest(`base64`)\n\n  const resultHashCache = getResultHashCache()\n\n  let resultHashCacheKey = queryJob.id\n  if (queryJob.queryType === `static`) {\n    // For static queries we use hash for a file path we output results to.\n    // With automatic sort and aggregation graphql codemod it is possible\n    // to have same result, but different query text hashes which would skip\n    // writing out file to disk if we don't check query hash as well\n    resultHashCacheKey += `-${queryJob.hash}`\n  }\n\n  if (\n    resultHash !== (await resultHashCache.get(resultHashCacheKey)) ||\n    (queryJob.queryType === `page` &&\n      !pageDataExists(path.join(program.directory, `public`), queryJob.id))\n  ) {\n    await resultHashCache.set(resultHashCacheKey, resultHash)\n\n    if (queryJob.queryType === `page` || queryJob.queryType === `slice`) {\n      // We need to save this temporarily in cache because\n      // this might be incomplete at the moment\n      await savePageQueryResult(queryJob.id, resultJSON)\n      if (queryJob.queryType === `page`) {\n        store.dispatch({\n          type: `ADD_PENDING_PAGE_DATA_WRITE`,\n          payload: {\n            path: queryJob.id,\n          },\n        })\n      } else if (queryJob.queryType === `slice`) {\n        store.dispatch({\n          type: `ADD_PENDING_SLICE_DATA_WRITE`,\n          payload: {\n            name: queryJob.id.substring(7), // remove \"slice--\" prefix\n          },\n        })\n      }\n    } else if (queryJob.queryType === `static`) {\n      const resultPath = path.join(\n        program.directory,\n        `public`,\n        `page-data`,\n        `sq`,\n        `d`,\n        `${queryJob.hash}.json`\n      )\n      await fs.outputFile(resultPath, resultJSON)\n    }\n  }\n\n  // Broadcast that a page's query has run.\n  store.dispatch(\n    actions.pageQueryRun({\n      path: queryJob.id,\n      componentPath: queryJob.componentPath,\n      queryType: queryJob.queryType,\n      resultHash,\n      queryHash: queryJob.hash,\n    })\n  )\n\n  return result\n}\n"],"mappings":"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"}